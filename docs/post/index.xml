<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on カタモトの/dev/null</title>
    <link>https://katamotokosuke.github.io/blog/post/</link>
    <description>Recent content in Posts on カタモトの/dev/null</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Dec 2018 23:42:59 +0900</lastBuildDate>
    
	<atom:link href="https://katamotokosuke.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Railsのautoload_pathsでの定数探索</title>
      <link>https://katamotokosuke.github.io/blog/post/rails-autoload_path/</link>
      <pubDate>Tue, 25 Dec 2018 23:42:59 +0900</pubDate>
      
      <guid>https://katamotokosuke.github.io/blog/post/rails-autoload_path/</guid>
      <description>環境  Ruby 2.5.1 Rails 5.2.0  autoload_pathsの概要 例:
class Hoge &amp;lt; SuperHoge; end  のようにモデルを定義したとします。Hogeは未定義の場合定数作成され、定義済みであればオープンクラスされるためautoload_pathsの出番なしですが、SuperHogeのほうが未定義だった場合autoload_pathsを元に定数を探索しに行きます。 autoload_pathsがあるので
require &#39;super_hoge&#39;  といちいち書かなくてもよくなっています。
puts ActiveSupport::Dependencies.autoload_paths RAILS_ROOT/app/assets RAILS_ROOT/app/channels RAILS_ROOT/app/controllers RAILS_ROOT/app/controllers/concerns RAILS_ROOT/app/helpers RAILS_ROOT/app/jobs RAILS_ROOT/app/mailers RAILS_ROOT/app/models RAILS_ROOT/app/models/concerns ...etc  みたいにActiveSupport::Dependencies.autoload_pathsの結果が探索の対象になります。 詳しくはwebで(https://railsguides.jp/autoloading_and_reloading_constants.html)
実際のソースコードを見てみる rubyにはさまざまなフックメソッドが提供されていてその一つに定数が見つからないときにModule#const_missingというものがあります。これをActiveSupport::Dependencies::ModuleConstMissingではオーバーライドしています。このmoduleはrubyのModuleにincludeされているのでRailsを使う際に定数が見つからないとこのメソッドのconst_missingが呼ばれることになります。なのでこれを見ていくことにします。
https://github.com/rails/rails/blob/5-2-0/activesupport/lib/active_support/dependencies.rb#L191
def const_missing(const_name) from_mod = anonymous? ? guess_for_anonymous(const_name) : self Dependencies.load_missing_constant(from_mod, const_name) end  from_modはどの名前空間に属するかを特定しています。そして定数探索の旅が始まる！
ActiveSupport::Dependencies#load_missing_constant https://github.com/rails/rails/blob/master/activesupport/lib/active_support/dependencies.rb#L489
2018/05/23時点のソースをのせる。
def load_missing_constant(from_mod, const_name) unless qualified_const_defined?(from_mod.name) &amp;amp;&amp;amp; Inflector.constantize(from_mod.name).equal?(from_mod) raise ArgumentError, &amp;quot;A copy of #{from_mod} has been removed from the module tree but is still active!</description>
    </item>
    
  </channel>
</rss>